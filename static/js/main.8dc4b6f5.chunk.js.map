{"version":3,"sources":["Buttons/Btn.tsx","Display/Display.tsx","Counter.tsx","SettingsCounter/SettingsCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Btn","disabled","restProps","Display","displayText","value","maxValue","minValue","changeCuonter","className","Counter","props","incDis","onClick","changeResetBtn","inc","changeIncBtn","resetDis","reset","SettingsCounter","changeMaxValues","changeMinValues","setNumber","setFocus","focused","type","onChange","e","currentTarget","onFocus","App","useState","setValue","setMaxValue","setMinValue","setChangeCounter","setIncDis","setResetDis","useEffect","minNum","localStorage","getItem","maxNum","storMinNum","JSON","parse","storMaxNum","setItem","stringify","num","dis","numMin","numMax","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dc4b6f5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype btnPropsType = {\r\n    onClick: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst Btn: React.FC<btnPropsType> = ({disabled, ...restProps}) =>{\r\n    return (\r\n        <button\r\n            disabled={disabled}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Btn","import React from 'react';\r\n\r\ntype displayPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n    changeCuonter: boolean\r\n}\r\n\r\nexport const Display: React.FC<displayPropsType> = ({\r\n                                                        value,\r\n                                                        maxValue,\r\n                                                        minValue,\r\n                                                        changeCuonter,\r\n                                                    }) => {\r\n    let displayText\r\n    if (maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) {\r\n        displayText = 'Incorrect value!'\r\n    } else {\r\n        displayText = 'enter values and press \"set\"'\r\n    }\r\n\r\n    if(!changeCuonter) {\r\n        return (\r\n            <div className={(value === maxValue) ? `maxCount counterDisplay` : 'counterDisplay'}>\r\n                {value}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) ? 'errorSetValue' : 'setValue'}>\r\n                {displayText}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Btn from './Buttons/Btn'\r\nimport {Display} from './Display/Display';\r\n\r\ntype counterPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n    inc: (num: number) => void\r\n    reset: (num: number) => void\r\n    changeCuonter: boolean\r\n    incDis: boolean\r\n    resetDis: boolean\r\n    changeResetBtn: (dis: boolean) => void\r\n    changeIncBtn: (dis: boolean) => void\r\n}\r\n\r\nexport const Counter = (props: counterPropsType) => {\r\n\r\n    const inc = () => {\r\n        props.changeResetBtn(false)\r\n        if (props.value < props.maxValue) {\r\n            props.inc(props.value + 1)\r\n        } else {\r\n            props.changeIncBtn(true)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        props.changeIncBtn(false)\r\n        props.changeResetBtn(true)\r\n        props.reset(props.minValue)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"counterContainer\">\r\n                <div className=\"counterWrapper\">\r\n                    <Display\r\n                        value={props.value}\r\n                        maxValue={props.maxValue}\r\n                        minValue={props.minValue}\r\n                        changeCuonter={props.changeCuonter}\r\n                    />\r\n                    <div className=\"btnWrapper\">\r\n                        <Btn\r\n                            disabled={props.incDis || props.value === props.maxValue}\r\n                            onClick={inc}\r\n                        >Inc</Btn>\r\n                        <Btn\r\n                            disabled={props.resetDis}\r\n                            onClick={reset}\r\n                        >Reset</Btn>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport Btn from '../Buttons/Btn';\r\n\r\ntype settingsCounterPropsType = {\r\n    maxValue: number\r\n    minValue: number\r\n    inc: (num: number) => void\r\n    setNumber: (numMin: number, numMax: number) => void\r\n    changeMaxValues: (numMax: number) => void\r\n    changeMinValues: (numMin: number) => void\r\n    changeCuonter: boolean\r\n    setFocus: (focus: boolean) => void\r\n    changeResetBtn: (dis: boolean) => void\r\n    changeIncBtn: (dis: boolean) => void\r\n}\r\n\r\nexport const SettingsCounter: React.FC<settingsCounterPropsType> = ({\r\n                                                                        maxValue,\r\n                                                                        minValue,\r\n                                                                        changeMaxValues,\r\n                                                                        changeMinValues,\r\n                                                                        setNumber,\r\n                                                                        inc,\r\n                                                                        setFocus,\r\n                                                                        changeResetBtn,\r\n                                                                        changeIncBtn}) => {\r\n\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeMaxValues(+e.currentTarget.value)\r\n        changeIncBtn(true)\r\n        changeResetBtn(true)\r\n    }\r\n\r\n    const changeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeMinValues(+e.currentTarget.value)\r\n        changeIncBtn(true)\r\n        changeResetBtn(true)\r\n    }\r\n\r\n    const setNumbers = () => {\r\n        inc(minValue)\r\n        setNumber(minValue, maxValue)\r\n        changeIncBtn(false)\r\n    }\r\n\r\n    const focused = () => {\r\n        setFocus(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"counterContainer\">\r\n                <div className=\"counterWrapper\">\r\n                    <div className={'displaySetWrapper'}>\r\n\r\n                        <div className={'textWrapper'}>\r\n                            <span className={'setValueSpan'}>max value:</span>\r\n                            <span className={'setValueSpan'}>min value:</span>\r\n                        </div>\r\n\r\n                        <div className={'inputWrapper'}>\r\n                            <input\r\n                                className={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) ? 'errorInput' : 'input'}\r\n                                type=\"number\"\r\n                                value={maxValue}\r\n                                onChange={changeMaxValue}\r\n                                onFocus={focused}/>\r\n\r\n                            <input\r\n                                className={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) ? 'errorInput' : 'input'}\r\n                                type=\"number\"\r\n                                value={minValue}\r\n                                onChange={changeMinValue}\r\n                                onFocus={focused}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"btnWrapper\">\r\n                        <Btn\r\n                            disabled={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue)}\r\n                            onClick={setNumbers}>Set\r\n                        </Btn>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from './Counter';\r\nimport {SettingsCounter} from './SettingsCounter/SettingsCounter';\r\n\r\nfunction App() {\r\n    const [value, setValue] = useState<number>( 0)\r\n    const [maxValue, setMaxValue] = useState<number>( 5)\r\n    const [minValue, setMinValue] = useState<number>( 0)\r\n    const [changeCuonter, setChangeCounter]  = useState<boolean>(false)\r\n    const [incDis, setIncDis] = useState<boolean>(false)\r\n    const [resetDis, setResetDis] = useState<boolean>(true)\r\n\r\n    useEffect(() => {\r\n        let minNum = localStorage.getItem(\"MinValue\")\r\n        let maxNum = localStorage.getItem(\"MaxValue\")\r\n        if(minNum && maxNum) {\r\n            let storMinNum = JSON.parse(minNum)\r\n            let storMaxNum = JSON.parse(maxNum)\r\n            setMinValue(storMinNum)\r\n            setValue(storMinNum)\r\n            setMaxValue(storMaxNum)\r\n            if (storMinNum >= storMaxNum) {\r\n                setChangeCounter(true)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"MinValue\", JSON.stringify(minValue))\r\n    }, [maxValue, minValue])\r\n\r\n    const inc = (num: number) => {\r\n        setValue(num)\r\n    }\r\n\r\n    const reset = (num: number) => {\r\n        setValue(num)\r\n    }\r\n\r\n    const setNumber = (numMin: number, numMax: number) => {\r\n        setChangeCounter(false)\r\n        setMaxValue(numMax)\r\n        setMinValue(numMin)\r\n    }\r\n\r\n    const changeMaxValues = (numMax: number) => {\r\n        setMaxValue(numMax)\r\n    }\r\n\r\n    const changeMinValues = (numMin: number) => {\r\n        setMinValue(numMin)\r\n    }\r\n\r\n    const setFocus = (focus: boolean) => {\r\n        setChangeCounter(focus)\r\n    }\r\n\r\n    const changeIncBtn = (dis: boolean) => {\r\n        setIncDis(dis)\r\n    }\r\n\r\n    const changeResetBtn = (dis: boolean) => {\r\n        setResetDis(dis)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <SettingsCounter\r\n                inc={inc}\r\n                maxValue={maxValue}\r\n                minValue={minValue}\r\n                setNumber={setNumber}\r\n                changeMaxValues={changeMaxValues}\r\n                changeMinValues={changeMinValues}\r\n                changeCuonter={changeCuonter}\r\n                setFocus={setFocus}\r\n                changeIncBtn={changeIncBtn}\r\n                changeResetBtn={changeResetBtn}\r\n            />\r\n            <Counter\r\n                value={value}\r\n                maxValue={maxValue}\r\n                minValue={minValue}\r\n                changeCuonter={changeCuonter}\r\n                incDis={incDis}\r\n                resetDis={resetDis}\r\n                inc={inc}\r\n                reset={reset}\r\n                changeIncBtn={changeIncBtn}\r\n                changeResetBtn={changeResetBtn}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}