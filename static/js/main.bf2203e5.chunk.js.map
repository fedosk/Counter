{"version":3,"sources":["Buttons/Btn.tsx","Display/Display.tsx","Counter.tsx","SettingsCounter/SettingsCounter.tsx","bll/counter-reducer.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["Btn","disabled","restProps","Display","displayText","value","maxValue","minValue","changeCuonter","className","Counter","props","incDis","onClick","inc","resetDis","reset","SettingsCounter","changeMaxValues","changeMinValues","setNumber","setFocus","focused","type","onChange","e","currentTarget","onFocus","INCREMENT","RESET_VALUE","SET_MAX_VALUE","SET_MIN_VALUE","SET_MIN_AND_MAX_VALUES","SET_FOCUS","initialState","changeCounter","incBtnDislable","resetBtnDislable","App","useSelector","state","counter","dispatch","useDispatch","numMax","setMaxValue","numMin","setMinValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","preloadedState","persistedTodosString","localStorage","getItem","JSON","parse","console","error","loadFromLocalStorage","store","createStore","subscribe","setItem","stringify","saveToLocalStorage","getState","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf2203e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype btnPropsType = {\r\n    onClick: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst Btn: React.FC<btnPropsType> = ({disabled, ...restProps}) =>{\r\n    return (\r\n        <button\r\n            disabled={disabled}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Btn","import React from 'react';\r\n\r\ntype displayPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n    changeCuonter: boolean\r\n}\r\n\r\nexport const Display: React.FC<displayPropsType> = ({\r\n                                                        value,\r\n                                                        maxValue,\r\n                                                        minValue,\r\n                                                        changeCuonter,\r\n                                                    }) => {\r\n    let displayText\r\n    if (maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) {\r\n        displayText = 'Incorrect value!'\r\n    } else {\r\n        displayText = 'enter values and press \"set\"'\r\n    }\r\n\r\n    if(!changeCuonter) {\r\n        return (\r\n            <div className={(value === maxValue) ? `maxCount counterDisplay` : 'counterDisplay'}>\r\n                {value}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) ? 'errorSetValue' : 'setValue'}>\r\n                {displayText}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Btn from './Buttons/Btn'\r\nimport {Display} from './Display/Display';\r\n\r\ntype counterPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n    inc: () => void\r\n    reset: () => void\r\n    changeCuonter: boolean\r\n    incDis: boolean\r\n    resetDis: boolean\r\n}\r\n\r\nexport const Counter = (props: counterPropsType) => {\r\n\r\n    const inc = () => {\r\n        props.inc()\r\n    }\r\n\r\n    const reset = () => {\r\n        props.reset()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"counterContainer\">\r\n                <div className=\"counterWrapper\">\r\n                    <Display\r\n                        value={props.value}\r\n                        maxValue={props.maxValue}\r\n                        minValue={props.minValue}\r\n                        changeCuonter={props.changeCuonter}\r\n                    />\r\n                    <div className=\"btnWrapper\">\r\n                        <Btn\r\n                            disabled={props.incDis || props.value === props.maxValue}\r\n                            onClick={inc}\r\n                        >Inc</Btn>\r\n                        <Btn\r\n                            disabled={props.resetDis}\r\n                            onClick={reset}\r\n                        >Reset</Btn>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport Btn from '../Buttons/Btn';\r\n\r\ntype settingsCounterPropsType = {\r\n    maxValue: number\r\n    minValue: number\r\n    setNumber: () => void\r\n    changeMaxValues: (numMax: number) => void\r\n    changeMinValues: (numMin: number) => void\r\n    setFocus: () => void\r\n}\r\n\r\nexport const SettingsCounter: React.FC<settingsCounterPropsType> = ({\r\n                                                                        maxValue,\r\n                                                                        minValue,\r\n                                                                        changeMaxValues,\r\n                                                                        changeMinValues,\r\n                                                                        setNumber,\r\n                                                                        setFocus,\r\n                                                                      }) => {\r\n\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeMaxValues(+e.currentTarget.value)\r\n    }\r\n\r\n    const changeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeMinValues(+e.currentTarget.value)\r\n    }\r\n\r\n    const setNumbers = () => {\r\n        setNumber()\r\n    }\r\n\r\n    const focused = () => {\r\n        setFocus()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"counterContainer\">\r\n                <div className=\"counterWrapper\">\r\n                    <div className={'displaySetWrapper'}>\r\n\r\n                        <div className={'textWrapper'}>\r\n                            <span className={'setValueSpan'}>max value:</span>\r\n                            <span className={'setValueSpan'}>min value:</span>\r\n                        </div>\r\n\r\n                        <div className={'inputWrapper'}>\r\n                            <input\r\n                                className={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) ? 'errorInput' : 'input'}\r\n                                type=\"number\"\r\n                                value={maxValue}\r\n                                onChange={changeMaxValue}\r\n                                onFocus={focused}/>\r\n\r\n                            <input\r\n                                className={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue) ? 'errorInput' : 'input'}\r\n                                type=\"number\"\r\n                                value={minValue}\r\n                                onChange={changeMinValue}\r\n                                onFocus={focused}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"btnWrapper\">\r\n                        <Btn\r\n                            disabled={(maxValue < minValue || maxValue < 0 || minValue < 0 || maxValue === minValue)}\r\n                            onClick={setNumbers}>Set\r\n                        </Btn>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","const INCREMENT = 'INCREMENT'\r\nconst RESET_VALUE = 'RESET_VALUE'\r\nconst SET_MAX_VALUE = 'SET_MAX_VALUE'\r\nconst SET_MIN_VALUE = 'SET_MIN_VALUE'\r\nconst SET_MIN_AND_MAX_VALUES = 'SET_MIN_AND_MAX_VALUES'\r\nconst SET_FOCUS = 'SET_FOCUS'\r\n\r\nconst initialState = {\r\n    value: 0,\r\n    maxValue: 5,\r\n    minValue: 0,\r\n    changeCounter: false,\r\n    incBtnDislable: false,\r\n    resetBtnDislable: true,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType) : InitialStateType => {\r\n    switch (action.type) {\r\n        case INCREMENT: {\r\n            return {\r\n                ...state,\r\n                value: (state.value < state.maxValue) ? state.value + 1 : state.value,\r\n                resetBtnDislable: (state.value > state.maxValue),\r\n                incBtnDislable: (state.value === state.maxValue),\r\n            }\r\n        }\r\n        case RESET_VALUE: {\r\n            return {\r\n                ...state,\r\n                value: state.minValue,\r\n                incBtnDislable: false,\r\n                resetBtnDislable: true,\r\n            }\r\n        }\r\n        case SET_MAX_VALUE: {\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n                incBtnDislable: true,\r\n                resetBtnDislable: true,\r\n            }\r\n        }\r\n        case SET_MIN_VALUE: {\r\n            return {\r\n                ...state,\r\n                minValue: action.minValue,\r\n                incBtnDislable: true,\r\n                resetBtnDislable: true,\r\n            }\r\n        }\r\n        case SET_MIN_AND_MAX_VALUES: {\r\n            return {\r\n                ...state,\r\n                value: state.minValue,\r\n                incBtnDislable: false,\r\n                changeCounter: false,\r\n            }\r\n        }\r\n        case SET_FOCUS: {\r\n            return {\r\n                ...state,\r\n                changeCounter: true,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionType = ReturnType<typeof incremetValue>\r\n    | ReturnType<typeof resetValue>\r\n    | ReturnType<typeof setMaxValue>\r\n    | ReturnType<typeof setMinValue>\r\n    | ReturnType<typeof setMinAndMaxValues>\r\n    | ReturnType<typeof setFucus>\r\n\r\nexport const incremetValue = () => ({type: INCREMENT} as const)\r\nexport const resetValue = () => ({type: RESET_VALUE} as const)\r\nexport const setMaxValue = (maxValue: number) => ({type: SET_MAX_VALUE, maxValue} as const)\r\nexport const setMinValue = (minValue: number) => ({type: SET_MIN_VALUE, minValue} as const)\r\nexport const setMinAndMaxValues = () => ({type: SET_MIN_AND_MAX_VALUES} as const)\r\nexport const setFucus = () => ({type: SET_FOCUS} as const)\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from './Counter';\r\nimport {SettingsCounter} from './SettingsCounter/SettingsCounter';\r\nimport {\r\n    incremetValue,\r\n    InitialStateType,\r\n    resetValue, setFucus,\r\n    setMaxValue,\r\n    setMinAndMaxValues,\r\n    setMinValue\r\n} from \"./bll/counter-reducer\";\r\nimport {AppRootStateType, AppStoreType, store} from \"./bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nfunction App() {\r\n\r\n    const value = useSelector<AppRootStateType, number>(state => state.counter.value)\r\n    const maxValue = useSelector<AppRootStateType, number>(state => state.counter.maxValue)\r\n    const minValue = useSelector<AppRootStateType, number>(state => state.counter.minValue)\r\n    const changeCuonter = useSelector<AppRootStateType, boolean>(state => state.counter.changeCounter)\r\n    const incDis = useSelector<AppRootStateType, boolean>(state => state.counter.incBtnDislable)\r\n    const resetDis = useSelector<AppRootStateType, boolean>(state => state.counter.resetBtnDislable)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const inc = () => {\r\n        dispatch(incremetValue())\r\n    }\r\n\r\n    const reset = () => {\r\n        dispatch(resetValue())\r\n    }\r\n\r\n    const changeMaxValues = (numMax: number) => {\r\n        dispatch(setMaxValue(numMax))\r\n    }\r\n\r\n    const changeMinValues = (numMin: number) => {\r\n        dispatch(setMinValue(numMin))\r\n    }\r\n\r\n    const setNumber = () => {\r\n        dispatch(setMinAndMaxValues())\r\n    }\r\n\r\n    const setFocus = () => {\r\n        dispatch(setFucus())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <SettingsCounter\r\n                maxValue={maxValue}\r\n                minValue={minValue}\r\n                setNumber={setNumber}\r\n                changeMaxValues={changeMaxValues}\r\n                changeMinValues={changeMinValues}\r\n                setFocus={setFocus}\r\n            />\r\n            <Counter\r\n                value={value}\r\n                maxValue={maxValue}\r\n                minValue={minValue}\r\n                changeCuonter={changeCuonter}\r\n                incDis={incDis}\r\n                resetDis={resetDis}\r\n                inc={inc}\r\n                reset={reset}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*useEffect(() => {\r\n     let minNum = localStorage.getItem(\"MinValue\")\r\n     let maxNum = localStorage.getItem(\"MaxValue\")\r\n     if(minNum && maxNum) {\r\n         let storMinNum = JSON.parse(minNum)\r\n         let storMaxNum = JSON.parse(maxNum)\r\n         setMinValue(storMinNum)\r\n         setValue(storMinNum)\r\n         setMaxValue(storMaxNum)\r\n         if (storMinNum >= storMaxNum) {\r\n             setChangeCounter(true)\r\n         }\r\n     }\r\n }, [])\r\n\r\n useEffect(() => {\r\n     localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n     localStorage.setItem(\"MinValue\", JSON.stringify(minValue))\r\n }, [maxValue, minValue])*/\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nconst saveToLocalStorage = (state: AppRootStateType) => {\r\n    try {\r\n        localStorage.setItem('counter-state', JSON.stringify(state));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\n\r\nconst loadFromLocalStorage = () => {\r\n    try {\r\n        const persistedTodosString = localStorage.getItem('counter-state');\r\n        if (persistedTodosString) {\r\n            return JSON.parse(persistedTodosString)\r\n        }\r\n    } catch (e) {\r\n        console.error(e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst preloadedState = loadFromLocalStorage();\r\n\r\n/*let preloadedState\r\nconst persistedTodosString = localStorage.getItem('counter-state');\r\nif (persistedTodosString) {\r\n    preloadedState = JSON.parse(persistedTodosString)\r\n}*/\r\n\r\nexport const store = createStore(rootReducer, preloadedState)\r\n\r\nstore.subscribe(() => {\r\n    saveToLocalStorage(store.getState());\r\n    //localStorage.setItem('counter-state', JSON.stringify(store.getState()));\r\n});\r\n\r\nexport type AppStoreType = typeof store\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}